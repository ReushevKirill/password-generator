{"version":3,"sources":["js/main.js"],"names":["passwordOutput","document","querySelector","generateBtn","rangeSlider","rangeLength","settingsSection","settingsList","querySelectorAll","btnCopyPassword","charset","isPasswordGenerated","textContent","value","settings","uppercase","lowercase","numbers","symbols","charsetType","generateRandomPassword","length","passwordResult","i","randomIndex","Math","floor","random","charAt","copyTextToClipboard","target","text","navigator","clipboard","writeText","then","alert","catch","forEach","setting","addEventListener","e","checkbox","checked","settingType","getAttribute","closest","classList","add","replace","remove"],"mappings":";AAAA,IAAMA,EAAiBC,SAASC,cAAc,aACxCC,EAAcF,SAASC,cAAc,mBACrCE,EAAcH,SAASC,cAAc,iBACrCG,EAAcJ,SAASC,cAAc,iBACrCI,EAAkBL,SAASC,cAAc,aACzCK,EAAeN,SAASO,iBAAiB,kBACzCC,EAAkBR,SAASC,cAAc,kBAE3CQ,EAAmG,0FACnGC,GAAsB,EAE1BX,EAAeY,YAAc,sBAC7BP,EAAYO,YAAcR,EAAYS,MAEtC,IAAMC,EAAW,CAChBC,WAAW,EACXC,WAAW,EACXC,SAAS,EACTC,SAAS,GAGJC,EAAc,CACnBJ,UAAW,6BACXC,UAAW,6BACXC,QAAS,aACTC,QAAO,6BAGFE,EAAyB,SAACC,EAAQX,GACvC,IAAIY,EAAiB,GAErB,IAAKC,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAC5B,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWjB,EAAQW,QACvDC,GAAkBZ,EAAQkB,OAAOJ,GAGlCxB,EAAeY,YACdU,GAAkB,kCAKlBX,IAHIW,GAOAO,EAAsB,SAAAC,GAC3B,IAAMC,EAAOD,EAAOlB,YACfmB,GAELC,UAAUC,UACRC,UAAUH,GACVI,KAAK,WAAA,OAAMC,MAAM,sCACjBC,MAAM,WAAA,OAAMD,MAAM,6BAGrB7B,EAAa+B,QAAQ,SAAAC,GAAO,OAC3BA,EAAQC,iBAAiB,QAAS,SAAAC,GACjC,IAAMC,EAAWD,EAAEX,OACba,EAAUD,EAASC,QACnBC,EAAcF,EAASG,aAAa,gBAE1C/B,EAAS8B,GAAeD,EACpBA,GACHjC,GAAWS,EAAYyB,GACvBF,EAASI,QAAQ,wBAAwBC,UAAUC,IAAI,YAEvDtC,EAAUA,EAAQuC,QAAQ9B,EAAYyB,GAAc,IACpDF,EAASI,QAAQ,wBAAwBC,UAAUG,OAAO,eAK7D9C,EAAYoC,iBAAiB,QAAS,WACrCnC,EAAYO,YAAcR,EAAYS,QAGvCV,EAAYqC,iBAAiB,QAAS,WACrCpB,EAAuBhB,EAAYS,MAAOH,KAG3CD,EAAgB+B,iBAAiB,QAAS,WACpC7B,GACLkB,EAAoB7B","file":"main.b704ec4b.js","sourceRoot":"..","sourcesContent":["const passwordOutput = document.querySelector('#password')\r\nconst generateBtn = document.querySelector('#btn_p_generate')\r\nconst rangeSlider = document.querySelector('#range_slider')\r\nconst rangeLength = document.querySelector('#range_length')\r\nconst settingsSection = document.querySelector('#settings')\r\nconst settingsList = document.querySelectorAll('[data-setting]')\r\nconst btnCopyPassword = document.querySelector('#password_copy')\r\n\r\nlet charset = `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+[]{}|;':,.<>?`\r\nlet isPasswordGenerated = false\r\n\r\npasswordOutput.textContent = 'Click on the button'\r\nrangeLength.textContent = rangeSlider.value\r\n\r\nconst settings = {\r\n\tuppercase: true,\r\n\tlowercase: true,\r\n\tnumbers: true,\r\n\tsymbols: true,\r\n}\r\n\r\nconst charsetType = {\r\n\tuppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\r\n\tlowercase: 'abcdefghijklmnopqrstuvwxyz',\r\n\tnumbers: '0123456789',\r\n\tsymbols: `!@#$%^&*()_+[]{}|;':,.<>?`,\r\n}\r\n\r\nconst generateRandomPassword = (length, charset) => {\r\n\tlet passwordResult = ''\r\n\r\n\tfor (i = 0; i < length; i++) {\r\n\t\tconst randomIndex = Math.floor(Math.random() * charset.length)\r\n\t\tpasswordResult += charset.charAt(randomIndex)\r\n\t}\r\n\r\n\tpasswordOutput.textContent =\r\n\t\tpasswordResult || 'Выберите хотя бы одну настройку'\r\n\r\n\tif (!passwordResult) {\r\n\t\tisPasswordGenerated = false\r\n\t} else {\r\n\t\tisPasswordGenerated = true\r\n\t}\r\n}\r\n\r\nconst copyTextToClipboard = target => {\r\n\tconst text = target.textContent\r\n\tif (!text) return\r\n\r\n\tnavigator.clipboard\r\n\t\t.writeText(text)\r\n\t\t.then(() => alert('Текст скопирован в буфер обмена!'))\r\n\t\t.catch(() => alert('Ошибка при копировании'))\r\n}\r\n\r\nsettingsList.forEach(setting =>\r\n\tsetting.addEventListener('input', e => {\r\n\t\tconst checkbox = e.target\r\n\t\tconst checked = checkbox.checked\r\n\t\tconst settingType = checkbox.getAttribute('data-setting')\r\n\r\n\t\tsettings[settingType] = checked\r\n\t\tif (checked) {\r\n\t\t\tcharset += charsetType[settingType]\r\n\t\t\tcheckbox.closest('[data-setting-label]').classList.add('active')\r\n\t\t} else {\r\n\t\t\tcharset = charset.replace(charsetType[settingType], '')\r\n\t\t\tcheckbox.closest('[data-setting-label]').classList.remove('active')\r\n\t\t}\r\n\t})\r\n)\r\n\r\nrangeSlider.addEventListener('input', () => {\r\n\trangeLength.textContent = rangeSlider.value\r\n})\r\n\r\ngenerateBtn.addEventListener('click', () => {\r\n\tgenerateRandomPassword(rangeSlider.value, charset)\r\n})\r\n\r\nbtnCopyPassword.addEventListener('click', () => {\r\n\tif (!isPasswordGenerated) return\r\n\tcopyTextToClipboard(passwordOutput)\r\n})\r\n"]}